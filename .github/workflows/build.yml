name: Test and build

on:
  push:
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: apex-algorithms-catalogue-web
  DOCKER_REGISTRY_REGION: eu-nl
  DOCKER_REGISTRY_URL: swr.eu-nl.otc.t-systems.com
  DOCKER_REGISTRY_BUCKET: vito
  NODE_VERSION: 20.17.0

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm install
      - run: npm run build

  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npm run test
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    # if: github.ref == 'refs/heads/main'
    outputs:
      version: v0.11.2
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      # - name: Get next version
      #   id: semver
      #   uses: ietf-tools/semver-action@v1
      #   with:
      #     token: ${{ github.token }}
      #     branch: main
      #     noVersionBumpBehavior: silent
      #     noNewCommitBehavior: silent
      - name: Create release tag
        uses: ncipollo/release-action@v1.12.0
        # if: ${{ steps.semver.outputs.next != null }}
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          tag: v0.11.2
          token: ${{ github.token }}

  build-docker:
    needs: [release]
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.version != null }}
    steps:
      - uses: actions/checkout@v4
      - name: Get release version
        env:
          TAG_VERSION: ${{ needs.release.outputs.version }}
        run: |
          echo "RELEASE_VERSION=${TAG_VERSION#v*}" >> $GITHUB_ENV
          echo $RELEASE_VERSION
      - name: Prepare envs
        run: |
          echo "IMAGE_NAME=${DOCKER_IMAGE_NAME}:${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG_RELEASE=${DOCKER_REGISTRY_URL}/${DOCKER_REGISTRY_BUCKET}/${DOCKER_IMAGE_NAME}:${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=${DOCKER_REGISTRY_URL}/${DOCKER_REGISTRY_BUCKET}/${DOCKER_IMAGE_NAME}:latest" >> $GITHUB_ENV
      - name: Build docker image
        run: |
          docker build . --tag $IMAGE_NAME
      - name: Tag the image
        run: |
          docker tag $IMAGE_NAME $IMAGE_TAG_RELEASE
          docker tag $IMAGE_NAME $IMAGE_TAG_LATEST
      - name: Docker login
        env:
          OS_ACCESS_KEY: ${{ secrets.OS_ACCESS_KEY }}
          OS_SECRET_KEY: ${{ secrets.OS_SECRET_KEY }}
        run: |
          LOGIN_KEY=`printf "$OS_ACCESS_KEY" | openssl dgst -binary -sha256 -hmac "$OS_SECRET_KEY" | od -An -vtx1 | sed 's/[ \n]//g' | sed 'N;s/\n//'`
          docker login -u ${DOCKER_REGISTRY_REGION}@${OS_ACCESS_KEY} -p ${LOGIN_KEY} ${DOCKER_REGISTRY_URL}
      - name: Push image to registry
        run: |
          docker push $IMAGE_TAG_RELEASE
          docker push $IMAGE_TAG_LATEST
      - name: Clean up the local images
        run: |
          docker rmi $IMAGE_TAG_RELEASE
          docker rmi $IMAGE_TAG_LATEST
          docker rmi $IMAGE_NAME